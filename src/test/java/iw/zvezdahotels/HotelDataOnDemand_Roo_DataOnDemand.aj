// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Hotel;
import iw.zvezdahotels.HotelDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect HotelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HotelDataOnDemand: @Component;
    
    private Random HotelDataOnDemand.rnd = new SecureRandom();
    
    private List<Hotel> HotelDataOnDemand.data;
    
    public Hotel HotelDataOnDemand.getNewTransientHotel(int index) {
        Hotel obj = new Hotel();
        setHAddress(obj, index);
        setHEmail(obj, index);
        setHMaxStayingDays(obj, index);
        setHName(obj, index);
        setHPricePerDouble(obj, index);
        setHPricePerExtraBed(obj, index);
        setHPricePerSingle(obj, index);
        setHStars(obj, index);
        setHTelephone(obj, index);
        setHWebsite(obj, index);
        return obj;
    }
    
    public void HotelDataOnDemand.setHAddress(Hotel obj, int index) {
        String hAddress = "hAddress_" + index;
        obj.setHAddress(hAddress);
    }
    
    public void HotelDataOnDemand.setHEmail(Hotel obj, int index) {
        String hEmail = "foo" + index + "@bar.com";
        obj.setHEmail(hEmail);
    }
    
    public void HotelDataOnDemand.setHMaxStayingDays(Hotel obj, int index) {
        int hMaxStayingDays = index;
        obj.setHMaxStayingDays(hMaxStayingDays);
    }
    
    public void HotelDataOnDemand.setHName(Hotel obj, int index) {
        String hName = "hName_" + index;
        obj.setHName(hName);
    }
    
    public void HotelDataOnDemand.setHPricePerDouble(Hotel obj, int index) {
        double hPricePerDouble = new Integer(index).doubleValue();
        obj.setHPricePerDouble(hPricePerDouble);
    }
    
    public void HotelDataOnDemand.setHPricePerExtraBed(Hotel obj, int index) {
        double hPricePerExtraBed = new Integer(index).doubleValue();
        obj.setHPricePerExtraBed(hPricePerExtraBed);
    }
    
    public void HotelDataOnDemand.setHPricePerSingle(Hotel obj, int index) {
        double hPricePerSingle = new Integer(index).doubleValue();
        obj.setHPricePerSingle(hPricePerSingle);
    }
    
    public void HotelDataOnDemand.setHStars(Hotel obj, int index) {
        int hStars = index;
        obj.setHStars(hStars);
    }
    
    public void HotelDataOnDemand.setHTelephone(Hotel obj, int index) {
        String hTelephone = "hTelephone_" + index;
        obj.setHTelephone(hTelephone);
    }
    
    public void HotelDataOnDemand.setHWebsite(Hotel obj, int index) {
        String hWebsite = "hWebsite_" + index;
        obj.setHWebsite(hWebsite);
    }
    
    public Hotel HotelDataOnDemand.getSpecificHotel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Hotel obj = data.get(index);
        Long id = obj.getId();
        return Hotel.findHotel(id);
    }
    
    public Hotel HotelDataOnDemand.getRandomHotel() {
        init();
        Hotel obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Hotel.findHotel(id);
    }
    
    public boolean HotelDataOnDemand.modifyHotel(Hotel obj) {
        return false;
    }
    
    public void HotelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Hotel.findHotelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Hotel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Hotel>();
        for (int i = 0; i < 10; i++) {
            Hotel obj = getNewTransientHotel(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
