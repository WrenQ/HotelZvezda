// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Booking;
import iw.zvezdahotels.BookingDataOnDemand;
import iw.zvezdahotels.Category;
import iw.zvezdahotels.CategoryDataOnDemand;
import iw.zvezdahotels.Hotel;
import iw.zvezdahotels.HotelDataOnDemand;
import iw.zvezdahotels.Usuario;
import iw.zvezdahotels.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BookingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BookingDataOnDemand: @Component;
    
    private Random BookingDataOnDemand.rnd = new SecureRandom();
    
    private List<Booking> BookingDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand BookingDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    HotelDataOnDemand BookingDataOnDemand.hotelDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand BookingDataOnDemand.usuarioDataOnDemand;
    
    public Booking BookingDataOnDemand.getNewTransientBooking(int index) {
        Booking obj = new Booking();
        setCategory(obj, index);
        setCode(obj, index);
        setCreditCard(obj, index);
        setDateBooking(obj, index);
        setDateCheckIn(obj, index);
        setDateCheckOut(obj, index);
        setHotel(obj, index);
        setPartialBill(obj, index);
        setUser(obj, index);
        setWithExtraBed(obj, index);
        return obj;
    }
    
    public void BookingDataOnDemand.setCategory(Booking obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void BookingDataOnDemand.setCode(Booking obj, int index) {
        int code = index;
        obj.setCode(code);
    }
    
    public void BookingDataOnDemand.setCreditCard(Booking obj, int index) {
        String creditCard = "creditCardxxxx_" + index;
        if (creditCard.length() > 16) {
            creditCard = creditCard.substring(0, 16);
        }
        obj.setCreditCard(creditCard);
    }
    
    public void BookingDataOnDemand.setDateBooking(Booking obj, int index) {
        Date dateBooking = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateBooking(dateBooking);
    }
    
    public void BookingDataOnDemand.setDateCheckIn(Booking obj, int index) {
        Date dateCheckIn = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCheckIn(dateCheckIn);
    }
    
    public void BookingDataOnDemand.setDateCheckOut(Booking obj, int index) {
        Date dateCheckOut = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCheckOut(dateCheckOut);
    }
    
    public void BookingDataOnDemand.setHotel(Booking obj, int index) {
        Hotel hotel = hotelDataOnDemand.getRandomHotel();
        obj.setHotel(hotel);
    }
    
    public void BookingDataOnDemand.setPartialBill(Booking obj, int index) {
        double partialBill = new Integer(index).doubleValue();
        obj.setPartialBill(partialBill);
    }
    
    public void BookingDataOnDemand.setUser(Booking obj, int index) {
        Usuario user = usuarioDataOnDemand.getRandomUsuario();
        obj.setUser(user);
    }
    
    public void BookingDataOnDemand.setWithExtraBed(Booking obj, int index) {
        Boolean withExtraBed = true;
        obj.setWithExtraBed(withExtraBed);
    }
    
    public Booking BookingDataOnDemand.getSpecificBooking(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Booking obj = data.get(index);
        Long id = obj.getId();
        return Booking.findBooking(id);
    }
    
    public Booking BookingDataOnDemand.getRandomBooking() {
        init();
        Booking obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Booking.findBooking(id);
    }
    
    public boolean BookingDataOnDemand.modifyBooking(Booking obj) {
        return false;
    }
    
    public void BookingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Booking.findBookingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Booking' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Booking>();
        for (int i = 0; i < 10; i++) {
            Booking obj = getNewTransientBooking(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
