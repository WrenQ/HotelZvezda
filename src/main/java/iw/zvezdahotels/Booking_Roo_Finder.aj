// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Booking;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Booking_Roo_Finder {
    
    public static Long Booking.countFindBookingsByDateBookingBetween(Date minDateBooking, Date maxDateBooking) {
        if (minDateBooking == null) throw new IllegalArgumentException("The minDateBooking argument is required");
        if (maxDateBooking == null) throw new IllegalArgumentException("The maxDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Booking AS o WHERE o.dateBooking BETWEEN :minDateBooking AND :maxDateBooking", Long.class);
        q.setParameter("minDateBooking", minDateBooking);
        q.setParameter("maxDateBooking", maxDateBooking);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByDateBookingBetween(Date minDateBooking, Date maxDateBooking) {
        if (minDateBooking == null) throw new IllegalArgumentException("The minDateBooking argument is required");
        if (maxDateBooking == null) throw new IllegalArgumentException("The maxDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery<Booking> q = em.createQuery("SELECT o FROM Booking AS o WHERE o.dateBooking BETWEEN :minDateBooking AND :maxDateBooking", Booking.class);
        q.setParameter("minDateBooking", minDateBooking);
        q.setParameter("maxDateBooking", maxDateBooking);
        return q;
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByDateBookingBetween(Date minDateBooking, Date maxDateBooking, String sortFieldName, String sortOrder) {
        if (minDateBooking == null) throw new IllegalArgumentException("The minDateBooking argument is required");
        if (maxDateBooking == null) throw new IllegalArgumentException("The maxDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Booking AS o WHERE o.dateBooking BETWEEN :minDateBooking AND :maxDateBooking");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Booking> q = em.createQuery(queryBuilder.toString(), Booking.class);
        q.setParameter("minDateBooking", minDateBooking);
        q.setParameter("maxDateBooking", maxDateBooking);
        return q;
    }
    
}
