// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Booking;
import iw.zvezdahotels.Room;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Booking_Roo_Finder {
    
    public static Long Booking.countFindBookingsByBDateBookingBetween(Date minBDateBooking, Date maxBDateBooking) {
        if (minBDateBooking == null) throw new IllegalArgumentException("The minBDateBooking argument is required");
        if (maxBDateBooking == null) throw new IllegalArgumentException("The maxBDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Booking AS o WHERE o.bDateBooking BETWEEN :minBDateBooking AND :maxBDateBooking", Long.class);
        q.setParameter("minBDateBooking", minBDateBooking);
        q.setParameter("maxBDateBooking", maxBDateBooking);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Booking.countFindBookingsByBRoom(Room bRoom) {
        if (bRoom == null) throw new IllegalArgumentException("The bRoom argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Booking AS o WHERE o.bRoom = :bRoom", Long.class);
        q.setParameter("bRoom", bRoom);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByBDateBookingBetween(Date minBDateBooking, Date maxBDateBooking) {
        if (minBDateBooking == null) throw new IllegalArgumentException("The minBDateBooking argument is required");
        if (maxBDateBooking == null) throw new IllegalArgumentException("The maxBDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery<Booking> q = em.createQuery("SELECT o FROM Booking AS o WHERE o.bDateBooking BETWEEN :minBDateBooking AND :maxBDateBooking", Booking.class);
        q.setParameter("minBDateBooking", minBDateBooking);
        q.setParameter("maxBDateBooking", maxBDateBooking);
        return q;
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByBDateBookingBetween(Date minBDateBooking, Date maxBDateBooking, String sortFieldName, String sortOrder) {
        if (minBDateBooking == null) throw new IllegalArgumentException("The minBDateBooking argument is required");
        if (maxBDateBooking == null) throw new IllegalArgumentException("The maxBDateBooking argument is required");
        EntityManager em = Booking.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Booking AS o WHERE o.bDateBooking BETWEEN :minBDateBooking AND :maxBDateBooking");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Booking> q = em.createQuery(queryBuilder.toString(), Booking.class);
        q.setParameter("minBDateBooking", minBDateBooking);
        q.setParameter("maxBDateBooking", maxBDateBooking);
        return q;
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByBRoom(Room bRoom) {
        if (bRoom == null) throw new IllegalArgumentException("The bRoom argument is required");
        EntityManager em = Booking.entityManager();
        TypedQuery<Booking> q = em.createQuery("SELECT o FROM Booking AS o WHERE o.bRoom = :bRoom", Booking.class);
        q.setParameter("bRoom", bRoom);
        return q;
    }
    
    public static TypedQuery<Booking> Booking.findBookingsByBRoom(Room bRoom, String sortFieldName, String sortOrder) {
        if (bRoom == null) throw new IllegalArgumentException("The bRoom argument is required");
        EntityManager em = Booking.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Booking AS o WHERE o.bRoom = :bRoom");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Booking> q = em.createQuery(queryBuilder.toString(), Booking.class);
        q.setParameter("bRoom", bRoom);
        return q;
    }
    
}
