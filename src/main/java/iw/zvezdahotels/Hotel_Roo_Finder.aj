// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Booking;
import iw.zvezdahotels.Hotel;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Hotel_Roo_Finder {
    
    public static Long Hotel.countFindHotelsByBookings(Set<Booking> bookings) {
        if (bookings == null) throw new IllegalArgumentException("The bookings argument is required");
        EntityManager em = Hotel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Hotel AS o WHERE");
        for (int i = 0; i < bookings.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :bookings_item").append(i).append(" MEMBER OF o.bookings");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int bookingsIndex = 0;
        for (Booking _booking: bookings) {
            q.setParameter("bookings_item" + bookingsIndex++, _booking);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Hotel> Hotel.findHotelsByBookings(Set<Booking> bookings) {
        if (bookings == null) throw new IllegalArgumentException("The bookings argument is required");
        EntityManager em = Hotel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Hotel AS o WHERE");
        for (int i = 0; i < bookings.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :bookings_item").append(i).append(" MEMBER OF o.bookings");
        }
        TypedQuery<Hotel> q = em.createQuery(queryBuilder.toString(), Hotel.class);
        int bookingsIndex = 0;
        for (Booking _booking: bookings) {
            q.setParameter("bookings_item" + bookingsIndex++, _booking);
        }
        return q;
    }
    
    public static TypedQuery<Hotel> Hotel.findHotelsByBookings(Set<Booking> bookings, String sortFieldName, String sortOrder) {
        if (bookings == null) throw new IllegalArgumentException("The bookings argument is required");
        EntityManager em = Hotel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Hotel AS o WHERE");
        for (int i = 0; i < bookings.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :bookings_item").append(i).append(" MEMBER OF o.bookings");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Hotel> q = em.createQuery(queryBuilder.toString(), Hotel.class);
        int bookingsIndex = 0;
        for (Booking _booking: bookings) {
            q.setParameter("bookings_item" + bookingsIndex++, _booking);
        }
        return q;
    }
    
}
