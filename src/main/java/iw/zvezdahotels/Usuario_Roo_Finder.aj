// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Usuario_Roo_Finder {
    
    public static Long Usuario.countFindUsuariosByUUsernameEquals(String uUsername) {
        if (uUsername == null || uUsername.length() == 0) throw new IllegalArgumentException("The uUsername argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.uUsername = :uUsername", Long.class);
        q.setParameter("uUsername", uUsername);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByUUsernameEquals(String uUsername) {
        if (uUsername == null || uUsername.length() == 0) throw new IllegalArgumentException("The uUsername argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.uUsername = :uUsername", Usuario.class);
        q.setParameter("uUsername", uUsername);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByUUsernameEquals(String uUsername, String sortFieldName, String sortOrder) {
        if (uUsername == null || uUsername.length() == 0) throw new IllegalArgumentException("The uUsername argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.uUsername = :uUsername");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("uUsername", uUsername);
        return q;
    }
    
}
