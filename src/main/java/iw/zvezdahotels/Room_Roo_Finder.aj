// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw.zvezdahotels;

import iw.zvezdahotels.Category;
import iw.zvezdahotels.Hotel;
import iw.zvezdahotels.Room;
import iw.zvezdahotels.room.RoomState;
import iw.zvezdahotels.room.RoomType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Room_Roo_Finder {
    
    public static Long Room.countFindRoomsByRCategory(Category rCategory) {
        if (rCategory == null) throw new IllegalArgumentException("The rCategory argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Room AS o WHERE o.rCategory = :rCategory", Long.class);
        q.setParameter("rCategory", rCategory);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Room.countFindRoomsByRHotel(Hotel rHotel) {
        if (rHotel == null) throw new IllegalArgumentException("The rHotel argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Room AS o WHERE o.rHotel = :rHotel", Long.class);
        q.setParameter("rHotel", rHotel);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Room.countFindRoomsByRState(RoomState rState) {
        if (rState == null) throw new IllegalArgumentException("The rState argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Room AS o WHERE o.rState = :rState", Long.class);
        q.setParameter("rState", rState);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Room.countFindRoomsByRType(RoomType rType) {
        if (rType == null) throw new IllegalArgumentException("The rType argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Room AS o WHERE o.rType = :rType", Long.class);
        q.setParameter("rType", rType);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Room> Room.findRoomsByRCategory(Category rCategory) {
        if (rCategory == null) throw new IllegalArgumentException("The rCategory argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery<Room> q = em.createQuery("SELECT o FROM Room AS o WHERE o.rCategory = :rCategory", Room.class);
        q.setParameter("rCategory", rCategory);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRCategory(Category rCategory, String sortFieldName, String sortOrder) {
        if (rCategory == null) throw new IllegalArgumentException("The rCategory argument is required");
        EntityManager em = Room.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Room AS o WHERE o.rCategory = :rCategory");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Room> q = em.createQuery(queryBuilder.toString(), Room.class);
        q.setParameter("rCategory", rCategory);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRHotel(Hotel rHotel) {
        if (rHotel == null) throw new IllegalArgumentException("The rHotel argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery<Room> q = em.createQuery("SELECT o FROM Room AS o WHERE o.rHotel = :rHotel", Room.class);
        q.setParameter("rHotel", rHotel);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRHotel(Hotel rHotel, String sortFieldName, String sortOrder) {
        if (rHotel == null) throw new IllegalArgumentException("The rHotel argument is required");
        EntityManager em = Room.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Room AS o WHERE o.rHotel = :rHotel");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Room> q = em.createQuery(queryBuilder.toString(), Room.class);
        q.setParameter("rHotel", rHotel);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRState(RoomState rState) {
        if (rState == null) throw new IllegalArgumentException("The rState argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery<Room> q = em.createQuery("SELECT o FROM Room AS o WHERE o.rState = :rState", Room.class);
        q.setParameter("rState", rState);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRState(RoomState rState, String sortFieldName, String sortOrder) {
        if (rState == null) throw new IllegalArgumentException("The rState argument is required");
        EntityManager em = Room.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Room AS o WHERE o.rState = :rState");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Room> q = em.createQuery(queryBuilder.toString(), Room.class);
        q.setParameter("rState", rState);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRType(RoomType rType) {
        if (rType == null) throw new IllegalArgumentException("The rType argument is required");
        EntityManager em = Room.entityManager();
        TypedQuery<Room> q = em.createQuery("SELECT o FROM Room AS o WHERE o.rType = :rType", Room.class);
        q.setParameter("rType", rType);
        return q;
    }
    
    public static TypedQuery<Room> Room.findRoomsByRType(RoomType rType, String sortFieldName, String sortOrder) {
        if (rType == null) throw new IllegalArgumentException("The rType argument is required");
        EntityManager em = Room.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Room AS o WHERE o.rType = :rType");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Room> q = em.createQuery(queryBuilder.toString(), Room.class);
        q.setParameter("rType", rType);
        return q;
    }
    
}
